install.packages("pastecs")
library(pastecs)
library(psych)
stat.desc(exam$math)
describe(exam$math)
###excel 파일 불러오기
install.packages("readxl")
library(search)
library(readxl)
exam_addition <- read_excel("exam_addition.xlsx", sheet = 1)
View(exam_addition)
exam$id <- NULL #id 변수 지워주기
View(exam_addition)
exam_addition$id <- NULL #id 변수 지워주기
###데이터 프레임 내보내기
write.csv(exam, file="exam1.csv")
###excel 파일 불러오기
install.packages("readxl")
library(readxl)
install.packages("writex1")
library(writex1)
###excel 파일 불러오기
install.packages("readxl")
install.packages("readxl")
install.packages("writex1")
install.packages("writexl")
library(writexl)
write_xlsx(exam_addition, path = "exam2.xlsx")
table(exam$address == "원효로")
table(exam$gender)
summary(exam)
View(exam)
table(exam$address == "원효로")
table(exam$gender != "Female")
#exam에서 1) 수학점수가 50점인 학생수
exam$math == 50
#exam에서 1) 수학점수가 50점인 학생수
var(exam$math == 50)
#exam에서 1) 수학점수가 50점인 학생수
dim(exam$math == 50)
#exam에서 1) 수학점수가 50점인 학생수
table(exam$math == 50)
#2) 50점이 아닌 학생수
table(exam$math != 50)
#3) 50점 이하인 학생수
table(exam$math <= 50)
#4) 50점 이상인 학생수
table(exam$math >= 50)
###table함수와 qplot함수를 통한 빈도수 확인하기
table(exam$address)
#exam에서 성별이 여성이 아닌 학생수
table(exam$gender != Female)
#exam에서 성별이 여성이 아닌 학생수
table(exam$gender != "Female")
###논리 연산자
#1) 영어점수가 50점 이하이고, 역사점수가 80점 이상인 학생은 몇 명인가?
table(exam$english <= 50 & exam$history >= 80)
table(exam$math >= 90 | exam$history >= 90)
#3) 주소가 효창동이거나, 청파동이거나, 서계동인 학생은 몇 명인가?
table(exam$address == "효창동" | "청파동" | "서계동")
#3) 주소가 효창동이거나, 청파동이거나, 서계동인 학생은 몇 명인가?
table(exam$address == ("효창동" | "청파동" | "서계동"))
#3) 주소가 효창동이거나, 청파동이거나, 서계동인 학생은 몇 명인가?
table(exam$address == "효창동" | exam$address == "청파동" | exam$address == "서계동")
table(exam$address %in% c("효창동", "청파동", "서계동"))
library(ggplot2)
mpg
library(dplyr)
exam <- rename(exam.var(fuel) = var(fl))
mpg <- rename(mpg.var(fuel) = var(fl))
mpg <- rename(mpg.var(fuel)=var(fl))
mpg <- rename(mpg, var(fuel) = var(fl))
mpg <- rename(mpg, fuel = fl)
mpg
mpg <- rename(mpg, city = cty)
mpg <- rename(mpg, highway = hwy)
mpg
View(mpg)
mpg <- mpg
str(mpg)
summary(mpg)
table(mpg$drv)
table(mpg$fuel)
table(mpg$fl)
mpg <- mpg
summary(mpg)
table(mpg$drv)
table(mpg$fl)
mpg <- mpg
mpg
###측정값 바꾸기
ifelse("A"=="B", "True", "False")
v1 <- 3
ifelse(v1 >= 3, "Y", "N")
mpg$drv <- ifelse(mpg$drv == "f", "forward", mpg$drv)
mpg
mpg$drv <- ifelse(mpg$drv == "r", "rear", mpg$drv)
mpg
mpg$drv <- ifelse(mpg$fuel == "d", "diesel", mpg$fuel)
mpg$drv <- ifelse(mpg$fuel == "e", "ethanol", mpg$fuel)
mpg$drv <- ifelse(mpg$fuel == "p", "premium", mpg$fuel)
mpg$drv <- ifelse(mpg$fuel == "c", "CNG", mpg$fuel)
mpg$drv <- ifelse(mpg$fuel == "r", "regular", mpg$fuel)
mpg
View(mpg)
mpg$fuel <- ifelse(mpg$fuel == "d", "diesel", mpg$fuel)
mpg$fuel <- ifelse(mpg$fuel == "e", "ethanol", mpg$fuel)
mpg$fuel <- ifelse(mpg$fuel == "r", "regular", mpg$fuel)
mpg$fuel <- ifelse(mpg$fuel == "c", "CNG", mpg$fuel)
mpg$fuel <- ifelse(mpg$fuel == "p", "premium", mpg$fuel)
mpg
#ggplot2 한글 깨짐 문제 해결
install.packages("extrafont")
library(extrafont)
font_import()
font_import()
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
#히스토그램 한글 깨짐 문제 해결
par(family="AppleGothic")
#요일을 한글로 설정하기 위해 시스템을 한글로 세팅
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
#1. weather.csv를 불러와서 weather 데이터 프레임 만들기
weather <- read.csv("weather.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
View(mpg)
## 1. 평균기온이 27도 이상인 날이 몇 일인가?
table(weather$평균기온 >= 27)
## 2. 평균기온이 10도 이상이고, 20도 이하인 날이 몇 일인가?
table(weather$평균기온 >= 10 & weather$평균기온 <= 20)
## 3. 일강수량이 0인 날은 얼마나 되는가?
table(weather$일강수량 == 0)
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
table(weather$일강수량 == NA)
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
table(weather$일강수량 == "")
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
table(weather$일강수량 == " ")
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
table(weather$일강수량 == NULL)
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
sum(is.na(weather$일강수량))
#4. 일시 변수를 이용해서 요일(월~일요일)을 파악한 후 이를 '요일'이라는 이름의 변수에 저장하시오. 그리고 '요일'변수의 척도를 문자에서 범주로 바꾸시오
## 힌트: 내장함수인 weekdays()를 활용함
weather$요일 <- weekdays(weather$일시)
#1. weather.csv를 불러와서 weather 데이터 프레임 만들기
weather <- read.csv("weather.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
#3. '일시' 변수에 대해 측정 척도를 문자에서 날짜(date)로, '요일 구분'에 대해 범주(factor)로 바꾸시오
## 힌트 요일로 변경 - df$var <- as.Date(df$var) /범주로 변경 - df$var <- as.factor(df$var)
weather$일시 <- as.Date(weather$일시)
weather$요일.구분 <- as.factor(weather$요일.구분)
str(weather) #타입 확인용
#4. 일시 변수를 이용해서 요일(월~일요일)을 파악한 후 이를 '요일'이라는 이름의 변수에 저장하시오. 그리고 '요일'변수의 척도를 문자에서 범주로 바꾸시오
## 힌트: 내장함수인 weekdays()를 활용함
weather$요일 <- weekdays(weather$일시)
weather$요일 <- as.factor(weather$요일)
#5. 14개 변수에 대해 summary()를 통해 검토해 보시오.
summary(weather)
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
table(weather$요일.구분)
weather$요일 <- factor(weather$요일, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
#1. weather.csv를 불러와서 weather 데이터 프레임 만들기
weather <- read.csv("weather.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
#3. '일시' 변수에 대해 측정 척도를 문자에서 날짜(date)로, '요일 구분'에 대해 범주(factor)로 바꾸시오
## 힌트 요일로 변경 - df$var <- as.Date(df$var) /범주로 변경 - df$var <- as.factor(df$var)
weather$일시 <- as.Date(weather$일시)
weather$요일.구분 <- as.factor(weather$요일.구분)
#4. 일시 변수를 이용해서 요일(월~일요일)을 파악한 후 이를 '요일'이라는 이름의 변수에 저장하시오. 그리고 '요일'변수의 척도를 문자에서 범주로 바꾸시오
## 힌트: 내장함수인 weekdays()를 활용함
weather$요일 <- weekdays(weather$일시)
weather$요일 <- as.factor(weather$요일)
#5. 14개 변수에 대해 summary()를 통해 검토해 보시오.
summary(weather)
#교수님 답 (아예 결측치 제거)
var(weather$일강수량, na.rm = T)
table(weather$요일.구분)
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
## 5. 월요일, 화요일, 수요일은 몇 일인가?
sum(is(weather$요일=="월요일"))
## 5. 월요일, 화요일, 수요일은 몇 일인가?
sum(is.na(weather$요일=="월요일"))
## 5. 월요일, 화요일, 수요일은 몇 일인가?
table(weather$요일 %in% c("월요일","화요일","수요일"))
weather$요일 <- factor(weather$요일, levels = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
## 5. 월요일, 화요일, 수요일은 몇 일인가?
table(weather$요일 %in% c("월요일","화요일","수요일"))
## 6. 최고기온이 30도 보다 높고, 평균.상대습도는 80보다 높은 날은 몇 일인가?
table(weather$최고기온 > 30 & weather$평균.상대습도 > 80)
## 7. 최저기온이 -10도보다 낮거나, 합계.일조시간이 1시간 미만인 날은 몇 일인가?
table(weather$최저기온 < -10 | weather$합계.일조시간 < 1)
#1. weather.csv를 불러와서 weather 데이터 프레임 만들기
weather <- read.csv("weather.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
#3. '일시' 변수에 대해 측정 척도를 문자에서 날짜(date)로, '요일 구분'에 대해 범주(factor)로 바꾸시오
## 힌트 요일로 변경 - df$var <- as.Date(df$var) /범주로 변경 - df$var <- as.factor(df$var)
weather$일시 <- as.Date(weather$일시)
weather$요일.구분 <- as.factor(weather$요일.구분)
str(weather) #타입 확인용
#4. 일시 변수를 이용해서 요일(월~일요일)을 파악한 후 이를 '요일'이라는 이름의 변수에 저장하시오. 그리고 '요일'변수의 척도를 문자에서 범주로 바꾸시오
## 힌트: 내장함수인 weekdays()를 활용함
weather$요일 <- weekdays(weather$일시)
weather$요일 <- as.factor(weather$요일)
#6. ‘일강수량’ 변수에 대해 분산을 구해 보시오.
weather$일강수량[is.na(weather$일강수량)] <- 0
summary(weather)
var(weather$일강수량)
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
table(weather$요일.구분)
weather$요일 <- factor(weather$요일, levels = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
## 3. 일강수량이 0인 날은 얼마나 되는가?
table(weather$일강수량 == 0)
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
table(is.na(weather$일강수량))
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
table(is.na(weather$일강수량))
## 3. 일강수량이 0인 날은 얼마나 되는가?
table(weather$일강수량 == 0)
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
table(is.na(weather$일강수량))
## 3. 일강수량이 0인 날은 얼마나 되는가?
table(weather$일강수량 == 0)
summary(weather$일강수량)
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
sum(is.na(weather$일강수량))
#1. weather.csv를 불러와서 weather 데이터 프레임 만들기
weather <- read.csv("weather.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
#3. '일시' 변수에 대해 측정 척도를 문자에서 날짜(date)로, '요일 구분'에 대해 범주(factor)로 바꾸시오
## 힌트 요일로 변경 - df$var <- as.Date(df$var) /범주로 변경 - df$var <- as.factor(df$var)
weather$일시 <- as.Date(weather$일시)
weather$요일.구분 <- as.factor(weather$요일.구분)
str(weather) #타입 확인용
#4. 일시 변수를 이용해서 요일(월~일요일)을 파악한 후 이를 '요일'이라는 이름의 변수에 저장하시오. 그리고 '요일'변수의 척도를 문자에서 범주로 바꾸시오
## 힌트: 내장함수인 weekdays()를 활용함
weather$요일 <- weekdays(weather$일시)
weather$요일 <- as.factor(weather$요일)
#6. ‘일강수량’ 변수에 대해 분산을 구해 보시오.
weather$일강수량[is.na(weather$일강수량)] <- 0
summary(weather)
var(weather$일강수량)
#교수님 답 (아예 결측치 제거)
var(weather$일강수량, na.rm = T)
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
table(weather$요일.구분)
weather$요일 <- factor(weather$요일, levels = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
table(is.na(weather$일강수량))
#1. weather.csv를 불러와서 weather 데이터 프레임 만들기
weather <- read.csv("weather.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
#3. '일시' 변수에 대해 측정 척도를 문자에서 날짜(date)로, '요일 구분'에 대해 범주(factor)로 바꾸시오
## 힌트 요일로 변경 - df$var <- as.Date(df$var) /범주로 변경 - df$var <- as.factor(df$var)
weather$일시 <- as.Date(weather$일시)
weather$요일.구분 <- as.factor(weather$요일.구분)
str(weather) #타입 확인용
#4. 일시 변수를 이용해서 요일(월~일요일)을 파악한 후 이를 '요일'이라는 이름의 변수에 저장하시오. 그리고 '요일'변수의 척도를 문자에서 범주로 바꾸시오
## 힌트: 내장함수인 weekdays()를 활용함
weather$요일 <- weekdays(weather$일시)
weather$요일 <- as.factor(weather$요일)
#교수님 답 (아예 결측치 제거)
var(weather$일강수량, na.rm = T)
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
table(weather$요일.구분)
weather$요일 <- factor(weather$요일, levels = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
## 4. 일강수량 변수의 측정값이 NA(결측치)인 날은 얼마나 되는가?
table(is.na(weather$일강수량))
summary(weather$일강수량)
table(!is.na(weather$일강수량))
#######추가예제2#######
weather_new <- weather
#8. 요일.구분은 요일구분으로, 평균.현지기압은 평균기압으로 변수명을 바꾸시오
weather_new <- rename(weather_new, 요일.구분 = 요일구분, 평균.현지기압=평균기압)
#8. 요일.구분은 요일구분으로, 평균.현지기압은 평균기압으로 변수명을 바꾸시오
weather_new <- rename(weather_new, 요일구분 = 요일.구분, 평균기압=평균.현지기압)
#9. 새로운 변수 요일구분과 관련해서 출력 순서를 기존의 평일-휴일에서, 휴일-평일로 변경하시오
weather_new$요일구분
#9. 새로운 변수 요일구분과 관련해서 출력 순서를 기존의 평일-휴일에서, 휴일-평일로 변경하시오
table(weather_new$요일구분)
#10. 일강수량이 0으로 측정되는 경우 이 값을 NA로 바꾸시오
ifelse(weather_new$일강수량 == 0, NA, weather_new$일강수량)
#10. 일강수량이 0으로 측정되는 경우 이 값을 NA로 바꾸시오
weather_new <- ifelse(weather_new$일강수량 == 0, NA, weather_new$일강수량)
View(weather)
#10. 일강수량이 0으로 측정되는 경우 이 값을 NA로 바꾸시오
weather_new <- ifelse(weather_new$일강수량 == "0", NA, weather_new$일강수량)
#10. 일강수량이 0으로 측정되는 경우 이 값을 NA로 바꾸시오
weather_new <- ifelse(weather_new$일강수량 == 0, NULL, weather_new$일강수량)
#10. 일강수량이 0으로 측정되는 경우 이 값을 NA로 바꾸시오
weather_new <- ifelse(weather_new$일강수량 == 0, NA, weather_new$일강수량)
#10. 일강수량이 0으로 측정되는 경우 이 값을 NA로 바꾸시오
weather_new$일강수량 <- ifelse(weather_new$일강수량 == 0, NA, weather_new$일강수량)
library(dplyr)
#10. 일강수량이 0으로 측정되는 경우 이 값을 NA로 바꾸시오
weather_new$일강수량 <- ifelse(weather_new$일강수량 == 0, NA, weather_new$일강수량)
#######추가예제2#######
weather_new <- weather
library(dplyr)
#8. 요일.구분은 요일구분으로, 평균.현지기압은 평균기압으로 변수명을 바꾸시오
weather_new <- rename(weather_new, 요일구분 = 요일.구분, 평균기압=평균.현지기압)
#9. 새로운 변수 요일구분과 관련해서 출력 순서를 기존의 평일-휴일에서, 휴일-평일로 변경하시오
table(weather_new$요일구분)
#10. 일강수량이 0으로 측정되는 경우 이 값을 NA로 바꾸시오
weather_new$일강수량 <- ifelse(weather_new$일강수량 == 0, NA, weather_new$일강수량)
#9. 새로운 변수 요일구분과 관련해서 출력 순서를 기존의 평일-휴일에서, 휴일-평일로 변경하시오
table(weather_new$요일구분)
weather_new$요일구분 <- factor(weather_new$요일구분, levels = c("휴일", "평일"))
#9. 새로운 변수 요일구분과 관련해서 출력 순서를 기존의 평일-휴일에서, 휴일-평일로 변경하시오
table(weather_new$요일구분)
View(weather_new)
#11. 평균기압에 대한 결측치는 몇 개인가?
table(is.nap(weather_new$평균기압))
#11. 평균기압에 대한 결측치는 몇 개인가?
table(is.na(weather_new$평균기압))
#12. 결측치를 제외한 평균기압 평균은 얼마인가? (유효숫자 소수 둘째자리)
mean(weather_new$평균기압)
#12. 결측치를 제외한 평균기압 평균은 얼마인가? (유효숫자 소수 둘째자리)
var(weather_new$평균기압, na.rm = T)
#12. 결측치를 제외한 평균기압 평균은 얼마인가? (유효숫자 소수 둘째자리)
mean(weather_new$평균기압, na.rm = T)
#12. 결측치를 제외한 평균기압 평균은 얼마인가? (유효숫자 소수 둘째자리)
mean(weather_new$평균기압, na.rm = T, digits = 6)
#12. 결측치를 제외한 평균기압 평균은 얼마인가? (유효숫자 소수 둘째자리)
mean(weather_new$평균기압, na.rm = T, digits = 5)
#12. 결측치를 제외한 평균기압 평균은 얼마인가? (유효숫자 소수 둘째자리)
mean(weather_new$평균기압, na.rm = T)
#12. 결측치를 제외한 평균기압 평균은 얼마인가? (유효숫자 소수 둘째자리)
m <- mean(weather_new$평균기압, na.rm = T)
#11. 평균기압에 대한 결측치는 몇 개인가?
table(is.na(weather_new$평균기압))
#13. 평균기압이 NA인 경우, 이를 문제 12에서 구한 평균값으로 대체하시오
weather_new$평균기압 <- ifelse(weather_new$평균기압 == NA, m, weather_new$평균기압)
#11. 평균기압에 대한 결측치는 몇 개인가?
table(is.na(weather_new$평균기압))
round(mean(weather_new$평균기압, na.rm = T), digits=2)
#######추가예제2#######
weather_new <- weather
library(dplyr)
#8. 요일.구분은 요일구분으로, 평균.현지기압은 평균기압으로 변수명을 바꾸시오
weather_new <- rename(weather_new, 요일구분 = 요일.구분, 평균기압=평균.현지기압)
#9. 새로운 변수 요일구분과 관련해서 출력 순서를 기존의 평일-휴일에서, 휴일-평일로 변경하시오
table(weather_new$요일구분)
weather_new$요일구분 <- factor(weather_new$요일구분, levels = c("휴일", "평일"))
#10. 일강수량이 0으로 측정되는 경우 이 값을 NA로 바꾸시오
weather_new$일강수량 <- ifelse(weather_new$일강수량 == 0, NA, weather_new$일강수량)
#11. 평균기압에 대한 결측치는 몇 개인가?
table(is.na(weather_new$평균기압))
round(mean(weather_new$평균기압, na.rm = T), digits=2)
#12. 결측치를 제외한 평균기압 평균은 얼마인가? (유효숫자 소수 둘째자리)
#m <- mean(weather_new$평균기압, na.rm = T)
m <- round(mean(weather_new$평균기압, na.rm = T), digits=2)
#13. 평균기압이 NA인 경우, 이를 문제 12에서 구한 평균값으로 대체하시오
weather_new$평균기압 <- ifelse(weather_new$평균기압 == NA, m, weather_new$평균기압)
#교수님 코드(13번)
weather_new$평균기압 <- ifelse(is.na(weather_new$평균기압), m, weather_new$평균기압)
#11. 평균기압에 대한 결측치는 몇 개인가?
table(is.na(weather_new$평균기압))
#12번 + 13번
weather_new$평균기압 <- ifelse(is.na(weather_new$평균기압), round(mean(weather_new$평균기압, na.rm = T), digits=2), weather_new$평균기압)
#1. weather.csv를 불러와서 weather 데이터 프레임 만들기
weather <- read.csv("weather.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
#3. '일시' 변수에 대해 측정 척도를 문자에서 날짜(date)로, '요일 구분'에 대해 범주(factor)로 바꾸시오
## 힌트 요일로 변경 - df$var <- as.Date(df$var) /범주로 변경 - df$var <- as.factor(df$var)
weather$일시 <- as.Date(weather$일시)
weather$요일.구분 <- as.factor(weather$요일.구분)
str(weather) #타입 확인용
#4. 일시 변수를 이용해서 요일(월~일요일)을 파악한 후 이를 '요일'이라는 이름의 변수에 저장하시오. 그리고 '요일'변수의 척도를 문자에서 범주로 바꾸시오
## 힌트: 내장함수인 weekdays()를 활용함
weather$요일 <- weekdays(weather$일시)
weather$요일 <- as.factor(weather$요일)
#5. 14개 변수에 대해 summary()를 통해 검토해 보시오.
summary(weather)
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
table(weather$요일.구분)
weather$요일 <- factor(weather$요일, levels = c("월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"))
#7. 요일과 요일.구분에 대해 빈도수를 각각 구하시오.
##요일의 경우, 가나다 순서대로 된 정렬을 요일별로 바꿀 수는 없을까?
table(weather$요일)
#요일을 한글로 설정하기 위해 시스템을 한글로 세팅
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
#1. weather.csv를 불러와서 weather 데이터 프레임 만들기
weather <- read.csv("weather.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
#2. 측정 척도가 문자인 변수는 무엇인가?
str(weather)
#3. '일시' 변수에 대해 측정 척도를 문자에서 날짜(date)로, '요일 구분'에 대해 범주(factor)로 바꾸시오
## 힌트 요일로 변경 - df$var <- as.Date(df$var) /범주로 변경 - df$var <- as.factor(df$var)
weather$일시 <- as.Date(weather$일시)
weather$요일.구분 <- as.factor(weather$요일.구분)
str(weather) #타입 확인용
#4. 일시 변수를 이용해서 요일(월~일요일)을 파악한 후 이를 '요일'이라는 이름의 변수에 저장하시오. 그리고 '요일'변수의 척도를 문자에서 범주로 바꾸시오
## 힌트: 내장함수인 weekdays()를 활용함
weather$요일 <- weekdays(weather$일시)
weather$요일 <- as.factor(weather$요일)
#5. 14개 변수에 대해 summary()를 통해 검토해 보시오.
summary(weather)
#6. ‘일강수량’ 변수에 대해 분산을 구해 보시오.
weather$일강수량[is.na(weather$일강수량)] <- 0
summary(weather)
exam %>% filter(class == 1)
library(dplyr)
exam %>% filter(class == 1)
exam_male <- exam %>% filter(gender == "Male")
var(exam_male$english)
### 1. 1반, 2반, 3반 학생들의 수학시험 평균은 얼마인가?
exam_1 <- exam %>%  filter(class == 1)
mean(exam_1)
exam_1
mean(exam_1$math)
exam_2 <- exam %>%  filter(class == 2)
mean(exam_2$math)
exam_3 <- exam %>%  filter(class == 3)
mean(exam_3$math)
### 2. 4반이 아닌 학생들 중에서 수학시험이 90점 이상이거나, 역사시험이 95점 이상인 학생들을 추출하여 새로운 데이터 프레임(exam_N4)을 만드시오.
exam_N4 <- exam %>% filter(class != 4 & (math >= 90 | history >= 95))
exam_N4
### 2. 4반이 아닌 학생들 중에서 수학시험이 90점 이상이거나, 역사시험이 95점 이상인 학생들을 추출하여 새로운 데이터 프레임(exam_N4)을 만드시오.
exam_N4 <- exam %>% filter(class != 4 & math >= 90 | history >= 95)
exam_N4
mean(exam_123$math)
exam_123 <- exam %>% filter(class == (1 | 2 | 3))
mean(exam_123$math)
exam_123$math
exam_123 <- exam %>% filter(class == 1 | class == 2 | class ==3)
mean(exam_123$math)
exam_123 <- exam %>% filter(class %in% c(1, 2, 3))
mean(exam_123$math)
#교수님 코드
exam_N4 <- exam %>% filter(class != 4) %>% filter(math >= 90 | history >= 95)
### 2. 4반이 아닌 학생들 중에서 수학시험이 90점 이상이거나, 역사시험이 95점 이상인 학생들을 추출하여 새로운 데이터 프레임(exam_N4)을 만드시오.
#내 코드
exam_N4 <- exam %>% filter(class != 4 & (math >= 90 | history >= 95))
### 2. 4반이 아닌 학생들 중에서 수학시험이 90점 이상이거나, 역사시험이 95점 이상인 학생들을 추출하여 새로운 데이터 프레임(exam_N4)을 만드시오.
#내 코드
exam_N4 <- exam %>% filter(class != 4 & (math >= 90 | history >= 95))
View(exam_N4)
### 3. 영어시험 성적이 상위 10%인 학생들만 추출하시오.
exam %>% filter(english >= quantile(english, probs = c(0.9)))
quantile(exam$english, probs = c(0.9))
### 4. 배기량이 4 이하인 자동차의 고속도로 연비평균과 배기량이 5 이상인 자동차의 고속도로 연비평균을 비교하시오.
mpg_4 <- mpg %>% filter(displ == 4)
mean(mpg_4$highway)
mpg_5 <- mpg %>% filter(displ == 5)
mean(mpg_4$highway)
mean(mpg_5$highway)
View(mpg)
### 5. 아우디와 도요타의 도심연비 평균을 비교하시오.
mpg_audi <- mpg %>% filter(manufacturer == "audi")
mpg_toyota <- mpg %>% filter(manufacturer == 'toyota')
is(mean(mpg_audi$city) > mean(mpg_toyota$city))
mean(mpg_audi$city) > mean(mpg_toyota$city)
mean(mpg_audi$city)
mean(mpg_toyota$city)
mean(mpg_audi$city) > mean(mpg_toyota$city)
mean(mpg_4$highway) > mean(mpg_5$highway)
View(mpg)
### 6. 세 회사(쉐보레, 포드, 혼다 자동차)의 고속도로연비 평균을 구하시오.
mpg_chevrolet <- mpg %>% filter(manufacturer == "chevrolet")
mpg_ford <- mpg %>% filter(manufacturer == "ford")
mpg_honda <- mpg %>% filter(manufacturer == "honda")
mpg_cfh <- mpg %>% filter(manufacturer %in% c("chevrolet", "ford", "honda"))
mean(mpg_cfh$highway)
mean(mpg_cfh$highway)
### 4. 배기량이 4 이하인 자동차의 고속도로 연비평균과 배기량이 5 이상인 자동차의 고속도로 연비평균을 비교하시오.
mpg_4 <- mpg %>% filter(displ <= 4)
mpg_5 <- mpg %>% filter(displ >= 5)
mean(mpg_4$highway) > mean(mpg_5$highway)
mean(mpg_4$highway)
mean(mpg_5$highway)
mean(mpg_4$highway) > mean(mpg_5$highway)
### select 함수 ###
exam %>% select(class, math, english)
exam %>% select(-address)
exam %>% select(contains("add"))
exam %>% select(-contains("add"))
### 7. 1반 학생들만을 대상으로 성별과 수학점수를 추출
exam %>% filter(class == 1) %>% select(gender, math)
exam %>% filter(class==1)
### 8. mpg에서 class와 city 두 개 변수만을 추출해서 새로운 데이터 프레임(mpg_cc)을 만드시오.
mpg_cc <- mpg %>% select(class, city)
View(mpg_cc)
### 9. 위에서 만든 데이터 프레임에서 suv 자동차와 compact 자동차의 도시연비 평균을 비교하시오.
mpg_ccSUV <- mpg_cc %>% filter(class="suv")
### 9. 위에서 만든 데이터 프레임에서 suv 자동차와 compact 자동차의 도시연비 평균을 비교하시오.
mpg_ccSUV <- mpg_cc %>% filter(class == "suv")
mpg_ccCOM <- mpg_cc %>% filter(class == "compact")
mean(mpg_ccSUV$city)
mean(mpg_ccCOM$city)
mean(mpg_ccSUV$city) > mean(mpg_ccCOM$city)
View(mpg_ccCOM)
### 10. 아우디 모델 중에서 고속도로 연비가 가장 높은 상위 3개 모델은?
mpg_audi %>% arrange(desc(highway))
exam %>% arrange(math)
exam %>% arrange(-math)
exam %>% arrange(class, -math)
mpg %>% filter(manufacturer=="audi") %>% arrange(desc(highway))
mpg %>% filter(manufacturer=="audi") %>% arrange(-highway) %>% head(3)
