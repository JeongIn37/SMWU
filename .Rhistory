###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(mean(percyouth)) %>% head(3)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(mean(percyouth)) %>% arrange(mean(percyouth)) %>% head(3)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean) %>% head(3)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(-percy_mean) %>% head(3)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth))
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean) %>% head(3)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(-percy_mean) %>% head(3)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(-percy_mean) %>% head(3)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean) %>% head(3)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(mean(percyouth)) %>% arrange(mean(percyouth))
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(mean(percyouth)) %>% arrange(mean(midwest$percyouth))
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(mean(percyouth)) %>% arrange(mean(midwest$percyouth))
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean) %>% head(1)
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(-percy_mean) %>% head(1)
###문제2.주(state)별로 아시아인구백분율 평균을 구했을 때, 평균이 가장 높은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(-percy_mean) %>% head(1)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(-percy_mean) %>% head(1)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean) %>% head(1)
###문제2.주(state)별로 아시아인구백분율 평균을 구했을 때, 평균이 가장 높은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(asia_mean = mean(total))
###문제2.주(state)별로 아시아인구백분율 평균을 구했을 때, 평균이 가장 높은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(asia_mean = mean((popasian/poptotal)*100))
mean((popasian/poptotal)*100)
mean((midwest$popasian/midwest$poptotal)*100)
mean((midwest$popasian/midwest$poptotal))
###문제2.주(state)별로 아시아인구백분율 평균을 구했을 때, 평균이 가장 높은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(asia_mean = mean((popasian/poptotal)*100))
###문제2.주(state)별로 아시아인구백분율 평균을 구했을 때, 평균이 가장 높은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(asia_mean = mean((popasian/poptotal)*100)) %>% arrange(asia_mean)
###문제2.주(state)별로 아시아인구백분율 평균을 구했을 때, 평균이 가장 높은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(asia_mean = mean((popasian/poptotal)*100)) %>% arrange(-asia_mean)
###문제3. 아래 표를 참고하여 새로운 변수 grade를 만드시오.
(midwest$senior/midwest$poptotal)*100
###문제3. 아래 표를 참고하여 새로운 변수 grade를 만드시오.
senior_portion = midwest$senior/midwest$poptotal*100
midwest <- midwest %>% mutate(grade = ifelse(senior_portion >= 15, "very large", ifelse(senior_portion >= 8, "large", ifelse(senior_portion >= 5, "middle", "small"))))
###문제4. grade에 대한 빈도를 구하시오.
table(midwest$grade)
###문제4. grade에 대한 빈도를 구하시오.
midwest$grade <- factor(midwest$grad, levels = c("very large", "large", "middle", "small"))
###문제4. grade에 대한 빈도를 구하시오.
midwest$grade <- factor(midwest$grade, levels = c("very large", "large", "middle", "small"))
table(midwest$grade)
###문제5. midwest_income.csv에는 county별로 1인당 연간 소득(단위: 달러) 변수 income을 포함하고 있다. 동일한 이름의 데이터 프레임을 만들고 midwest와 midwest_income을 통합한 후, income 전체 평균을 구하시오.
midwest_income <- read.csv("midwest_income.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
View(midwest_add)
View(midwest_income)
midwest <- left_join(midwest, midwest_income, by="PID")
mean(midwest$income)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40) %>% filter(senior_portion < 5)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40) %>% filter(senior/poptotal*100 < 5)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% select(county) %>% filter(percyouth >= 40) %>% filter(senior/poptotal*100 < 5)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40) %>% filter(senior/poptotal*100 < 5) %>% select(county)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40) %>% filter(senior/poptotal*100 < 5)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40) %>% filter(senior/poptotal*100 < 5) %>% mean(income)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40) %>% filter(senior/poptotal*100 < 5) %>%
mean(midwest$income)
mean(midwest$income)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40 & senior/poptotal*100 < 5)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40 & senior/poptotal*100 < 5) %>% select(county, income)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40 & senior/poptotal*100 < 5) %>% select(county, income) %>% mean(income)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40 & senior/poptotal*100 < 5) %>% select(county, income) %>% summarise(mean(income))
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean) %>% head(1)
###문제2.주(state)별로 아시아인구백분율 평균을 구했을 때, 평균이 가장 높은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(asia_mean = mean((popasian/poptotal)*100)) %>% arrange(-asia_mean) %>% head(1)
table(midwest$grade)
###문제5. midwest_income.csv에는 county별로 1인당 연간 소득(단위: 달러) 변수 income을 포함하고 있다. 동일한 이름의 데이터 프레임을 만들고 midwest와 midwest_income을 통합한 후, income 전체 평균을 구하시오.
midwest_income <- read.csv("midwest_income.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
midwest <- left_join(midwest, midwest_income, by="PID")
mean(midwest$income)
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean) %>% head(1)
###문제2.주(state)별로 아시아인구백분율 평균을 구했을 때, 평균이 가장 높은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(asia_mean = mean((popasian/poptotal)*100)) %>% arrange(-asia_mean) %>% head(1)
###문제3. 아래 표를 참고하여 새로운 변수 grade를 만드시오.
senior_portion = midwest$senior/midwest$poptotal*100
midwest <- midwest %>% mutate(grade = ifelse(senior_portion >= 15, "very large", ifelse(senior_portion >= 8, "large", ifelse(senior_portion >= 5, "middle", "small"))))
###문제4. grade에 대한 빈도를 구하시오.
midwest$grade <- factor(midwest$grade, levels = c("very large", "large", "middle", "small"))
table(midwest$grade)
###문제5. midwest_income.csv에는 county별로 1인당 연간 소득(단위: 달러) 변수 income을 포함하고 있다. 동일한 이름의 데이터 프레임을 만들고 midwest와 midwest_income을 통합한 후, income 전체 평균을 구하시오.
midwest_income <- read.csv("midwest_income.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
midwest <- left_join(midwest, midwest_income, by="PID")
mean(midwest$income)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40 & senior/poptotal*100 < 5) %>% select(county, income) %>% summarise(mean(income))
View(midwest_add)
View(midwest_income)
View(midwest)
##문제1##
library(ggplot2)
midwest <- ggplot2::midwest
##문제2##
midwest <- midwest %>% mutate(percyouth = (1 - popadults/poptotal)*100)
##문제3##
midwest %>% select(county, percyouth) %>% arrange(-percyouth) %>% head(5)
##문제4##
midwest <- midwest %>% mutate(group = ifelse(percyouth >= 40, "large", ifelse(percyouth >= 30, "middle", "small")))
table(midwest$group)
##문제5##
midwest_add <- read.csv("midwest_add.csv", stringsAsFactors = F)
midwest <- left_join(midwest, midwest_add, by = c("county" = "region"))
##문제6##
midwest <- midwest %>% distinct(PID, county, state, .keep_all = T)
##문제7##
table(midwest$state)
midwest %>% group_by(state) %>% filter(!is.na(senior)) %>% summarise(sum_senior = sum(senior))
##문제8##
install.packages("tidyr")
library(tidyr)
table(is.na(midwest$senior))
midwest <- midwest %>% drop_na()
##문제9##
midwest %>% group_by(category) %>% summarise(mean_popasian = mean(popasian)) %>% arrange(mean_popasian) %>% head(3)
midwest %>% select(inmetro:last_col())
###문제1.주(state)별로 미성년인구백분율 평균을 구했을 때, 평균이 가장 낮은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(percy_mean = mean(percyouth)) %>% arrange(percy_mean) %>% head(1)
###문제2.주(state)별로 아시아인구백분율 평균을 구했을 때, 평균이 가장 높은 지역과 평균을 각각 구하시오.
midwest %>% group_by(state) %>% summarise(asia_mean = mean((popasian/poptotal)*100)) %>% arrange(-asia_mean) %>% head(1)
###문제3. 아래 표를 참고하여 새로운 변수 grade를 만드시오.
senior_portion = midwest$senior/midwest$poptotal*100
midwest <- midwest %>% mutate(grade = ifelse(senior_portion >= 15, "very large", ifelse(senior_portion >= 8, "large", ifelse(senior_portion >= 5, "middle", "small"))))
###문제4. grade에 대한 빈도를 구하시오.
midwest$grade <- factor(midwest$grade, levels = c("very large", "large", "middle", "small"))
table(midwest$grade)
###문제5. midwest_income.csv에는 county별로 1인당 연간 소득(단위: 달러) 변수 income을 포함하고 있다. 동일한 이름의 데이터 프레임을 만들고 midwest와 midwest_income을 통합한 후, income 전체 평균을 구하시오.
midwest_income <- read.csv("midwest_income.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
midwest <- left_join(midwest, midwest_income, by="PID")
mean(midwest$income)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40 & senior/poptotal*100 < 5) %>% select(county, income) %>% summarise(mean(income))
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40 & senior/poptotal*100 < 5) %>% select(county, income) %>% summarise(mean(income))
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest %>% filter(percyouth >= 40 & senior_portion < 5) %>% select(county, income) %>% summarise(mean(income))
midwest_new <- midwest %>% select(percyouth,senior_portion,income) %>% filter(percyouth>=40 & senior_portion<5)
midwest_new <- midwest %>% select(percyouth,senior_portion,income)
###문제6. 미성년인구비율이 40%이상이고, senior 비율이 5% 미만인 county의 연간소득 평균값은 얼마인가?
midwest_test <- midwest %>% filter(percyouth >= 40 & senior_portion < 5) %>% select(county, income)
mean(midwest_test$income)
install.packages("foreign")
library(foreign)
raw_welfare <- read.spss(file="2015 welfare.sav", to.data.frame = T)
welfare <- raw_welfare
View(raw_welfare)
View(welfare)
welfare <- welfare %>% rename(gender = h10_g3, birth = h10_g4, marriage = h10_g10, religion = h10_g11, job = h10_eco9, income = p1002_8aq1, region = h10_reg7)
#7개 변수로만 구성된 데이터 프레임 만들기
welfare7 <- welfare %>% select(gender, birth, marriage, religion, job, income, region)
#성별 변수 전처리
welfare7$gender <- ifelse(welfare7$gender == 1, "male", "female")
table(welfare7$gender)
welfare7$gender <- as.factor(welfare7$gender)
str(welfare7)
# 월급 변수 전처리
summary(welfare7$income)
hist(welfare7$income, breaks = seq(0, 2400, by=50)
hist(welfare7$income, breaks = seq(0, 2400, by=50))
hist(welfare7$income, breaks = seq(0, 2400, by=50))
welfare7$income <- ifelse(welfare7$income == 9999, NA, welfare$income)
head(welfare)
install.packages("foreign")
library(foreign)
library(dplyr)
## 데이터 프레임 만들기 ##
raw_welfare <- read.spss(file = "2015 welfare.sav", to.data.frame = T)
welfare <- raw_welfare
##변수명 바꾸어서 서브 데이터 프레임 만들기##
welfare <- welfare %>% rename(gender = h10_g3, birth = h10_g4, marriage = h10_g10, religion = h10_g11, job = h10_eco9, income = p1002_8aq1, region = h10_reg7)
welfare7 <- welfare %>% select(gender, birth, marriage, religion, job, income, region)
## 성별 변수 전처리 ##
str(welfare7$gender)
summary(welfare7$gender)
table(welfare7$gender)
welfare7$gender <- ifelse(welfare7$gender == 1, "male", "female")
welfare7$gender <- as.factor(welfare7$gender)
## 월급 변수 전처리 ##
summary(welfare7$income)
hist(welfare7$income, breaks = seq(0, 2400, by = 50))
welfare7$income <- ifelse(welfare7$income == 9999, NA, welfare7$income)
head(welfare)
table(welfare7$income == 0)
welfare7$income <- ifelse(welfare7$income == 0, NA, welfare7$income)
table(is.na(welfare7$income))
## 성별에 따른 월급 차이 분석 ##
gender_income <- welfare7 %>% group_by(gender) %>% summarise(mean_income = mean(income, na.rm = T))
library(ggplot2)
ggplot(gender_income, aes(gender, mean_income, fill = mean_income)) + geom_bar(stat = "identity")
install.packages("foreign")
install.packages("foreign")
middle <- read.csv("middle.csv", stringsAsFactors = F, fileEncoding = "euc-kr")
library(dplyr)
library(ggplot2)
#한글깨짐해결용
install.packages("extrafont")
library(extrafont)
font_import()
font_import()
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
ggplot(mpg, aes(displ, higway)) + geom_point()
ggplot(mpg, aes(displ, highway)) + geom_point()
ggplot(mpg, aes(displ, highway)) + geom_point() + xlim(3, 6) + ylim(20, 30)
ggplot(mpg, aes(displ, highway, color = fuel)) + geom_point() + xlim(3, 6) + ylim(20, 30)
ggplot(mpg, aes(displ, highway, color = fuel)) + geom_point()
ggplot(mpg, aes(displ, highway, color = fuel)) + geom_point() + xlim(3, 6) + ylim(20, 30)
ggplot(mpg, aes(displ, highway, color = fuel)) + geom_point()
ggplot(mpg, aes(displ, highway, color = fuel)) + geom_point(aes(shape = drv, size= fuel))
#shape, size
ggplot(mpg, aes(displ, highway, color = drv)) + geom_point(aes(shape = drv, size= fuel))
ggplot(mpg, aes(city, highway)) + geom_point()
ggplot(mpg, aes(city, highway)) + geom_point() + xlim(0, 30) + ylim(0, 40)
ggplot(mpg, aes(city, highway)) + geom_point() + xlim(10, 30) + ylim(0, 40)
ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(10, 30) + ylim(0, 40)
ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(0, 30) + ylim(0, 40)
ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(0, 30) + ylim(0, 40) + geom_smooth()
#추세선 추가
ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(0, 30) + ylim(0, 40) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state))  + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 30) + ylim(0, 350000) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) +
geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 30) + ylim(0, 5000) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 350000) + ylim(0, 5000) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state))
+ xlim(0, 350000) + ylim(0, 5000) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 350000) + ylim(0, 5000) + geom_smooth()
#추세선 추가
ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(0, 30) + ylim(0, 40) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 350000) + ylim(0, 5000) + geom_smooth()
library(dplyr)
library(ggplot2)
#한글깨짐해결용
install.packages("extrafont")
library(extrafont)
font_import()
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
### 막대 그래프 그리기 ###
library(dplyr)
library(ggplot2)
df_mpg <- mpg %>% group_by(drv) %>% summarise(mean_sum = mean(sum))
View(df_mpg)
ggplot(df_mpg, aes(drv, mean_sum) + geom_bar(stat = "identity"))
ggplot(df_mpg, aes(drv, mean_sum)) + geom_bar(stat = "identity")
ggplot(df_mpg, aes(reorder(drv, mean_sum), mean_sum)) + geom_bar(stat = "identity")
ggplot(df_mpg, aes(reorder(drv, -mean_sum), mean_sum)) + geom_bar(stat = "identity")
ggplot(df_mpg, aes(reorder(drv, -mean_sum), mean_sum, fill = drv)) + geom_bar(stat = "identity")
ggplot(mpg, aes(class)) + geom_bar()
ggplot(mpg, aes(highway)) + geom_bar()
ggplot(mpg, aes(class, fill=class)) + geom_bar()
ggplot(mpg, aes(class, fill=class)) + geom_bar() + xlim(c("compact", "midsize", "suv"))
ggplot(mpg, aes(class, fill=class)) + geom_bar() + coord_flip()
ggplot(mpg, aes(class, fill=class)) + geom_bar() + coord_polar()
ggplot(mpg, aes(class, fill=fuel)) + geom_bar()
ggplot(mpg, aes(class, fill=fuel)) + geom_bar(position = "dodge")
ggplot(mpg, aes(class, fill=fuel)) + geom_bar(position = "fill")
mpg
df_mpg <- mpg %>% group_by(drv) %>% summarise(mean_sum = mean(sum))
ggplot(df_mpg, aes(drv, mean_sum)) + geom_bar(stat = "identity")
df_suv <- mpg %>% group_by(manufacturer) %>% summarise(mean_city = mean(city))
View(df_suv)
# 막대 그래프 실습 문제 (self)
df_suv <- mpg %>% group_by(manufacturer) %>% summarise(mean_city = mean(city))
ggplot(df_suv, aes(reorder(manufacturer, -mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity")
ggplot(mpg, aes(class, fill=class)) + geom_bar() + coord_flip()
ggplot(df_suv, aes(reorder(manufacturer, -mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity") + coord_flip()
# 막대 그래프 실습 문제 (교수님ver)
mpg_suv <- mpg %>% group_by(manufacturer) %>% filter(class=="suv") %>% summarise(mean_city = mean(city)) %>% arrange(-mean_city) %>% head(5)
View(mpg_suv)
ggplot(mpg_suv, aes(reorder(manufacturer, -mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity") + coord_flip()
ggplot(mpg_suv, aes(reorder(manufacturer, mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity") + coord_flip()
ggplot(mpg_suv, aes(reorder(manufacturer, mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity") + coord_flip() + labs(title = "회사별 suv 도심연비 평균 비교", x = "제조사", y = "suv 도심연비 평균")
### 히스토그램 그리기 ###
ggplot(mpg, aes(highway)) + geom_histogram()
ggplot(mpg, aes(highway)) + geom_histogram(binwidth = 0.5)
ggplot(mpg, aes(highway)) + geom_histogram(binwidth = 5)
ggplot(mpg, aes(highway)) + geom_histogram(binwidth = 1)
ggplot(mpg, aes(highway)) + geom_histogram(binwidth = 1, fill = "yellow", color = "red") + labs(title = "고속도로연비 히스토그램", x = "고속도로연비", y = "빈도")
library(dplyr)
library(ggplot2)
#한글깨짐해결용
install.packages("extrafont")
install.packages("extrafont")
font_import()
#한글깨짐해결용
install.packages("extrafont")
library(extrafont)
font_import()
theme_set(theme_grey(base_family="AppleGothic"))
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
economics <- ggplot2::economics
View(economics)
str(economics)
ggplot(economics, aes(date, unemploy)) + geom_line()
ggplot(economics, aes(date, unemploy)) + geom_line() + geom_point()
ggplot(economics, aes(date, unemploy)) + geom_line(color = "red") + geom_point(color = "darkred")
ggplot(economics, aes(date, unemploy)) + geom_line(color = "red") + geom_point(color = "blue4")
### 상자 그래프 그리기 ####
ggplot(mpg, aes(drv, highway)) + geon_boxplot()
### 상자 그래프 그리기 ####
ggplot(mpg, aes(drv, highway)) + geom_boxplot()
ggplot(mpg, aes(drv, highway), fill = drv) + geom_boxplot()
ggplot(mpg, aes(drv, highway,, fill = drv)) + geom_boxplot()
ggplot(mpg, aes(drv, highway,, fill = drv)) + geom_boxplot(outlier.color = "red")
ggplot(mpg, aes(drv, highway,, fill = drv)) + geom_boxplot(outlier.color = "red") + stat_summary(fun = "mean", geom = "point")
str(corona19)
### 코로나19 그래프 그리기 ###
corona19 <- read.csv("corona19.csv", stringsAsFactors = F)
str(corona19)
corona19$date <- as.Date(corona19$date)
str(corona19)
summary(corona19)
ggplot(corona19, aes(new_tests, new_cases)) + geom_point()
ggplot(corona19, aes(new_tests, new_cases)) + geom_point() + xlim(10000, 60000) + ylim(0, 3000)
ggplot(corona19, aes(new_tests, new_cases)) + geom_point() + xlim(10000, 60000) + ylim(0, 3000) + geom_smooth()
ggplot(corona19, aes(date, new_cases, fill = new_cases)) + geom_bar(stat = "identity")
ggplot(corona19, aes(date, new_cases)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, new_deaths)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, total_deaths)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, positive.rate)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, reproduction.rate)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, people_fully_vaccinated)) + geom_line(color="red") + geom_point(color="blue")
corona19_new <- read.csv("corona19.csv", stringsAsFactors = F)
corona19_new$date <- as.Date(corona19_new$date)
ggplot(corona19_new, aes(date, number, color = type))
ggplot(corona19_new, aes(date, number, color = type)) + geom_line() + geom_point()
View(corona19_new)
corona19_new <- read.csv("corona19_new.csv", stringsAsFactors = F)
corona19_new$date <- as.Date(corona19_new$date)
ggplot(corona19_new, aes(date, number, color = type)) + geom_line() + geom_point()
crime <- USArrests
library(tibble)
crime <- rownames_to_column(crime, var = "state")
crime$state <- tolower(crime$state)
install.packages("maps")
library(maps)
library(ggplot2)
states_map <- map_data("state")
install.packages("mapporj")
library(mapproj)
install.packages("ggiraphExtra")
library(ggiraphExtra)
ggChoropleth(data = crime, aes(fill=Murder, map_id=state), map = states_map)
ggChoropleth(data = crime, aes(fill=Murder, map_id=state), map = states_map, interactive = T)
View(states_map)
install.packages("stringi")
install.packages("stringi")
library(stringi)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
library(stringi)
library(devtools)
devtools::install_github("cardiomoon/kormaps2014")
devtools::install_github("cardiomoon/kormaps2014")
devtools::install_github("https://github.com/cardiomoon/kormaps2014")
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
remove.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
devtools::install_github("https://github.com/cardiomoon/kormaps2014")
devtools::install_github("cardiomoon/kormaps2014")
library(devtools)
install.packages("Rcpp", dependencies = TRUE)
library(devtools)
devtools::install_github("cardiomoon/kormaps2014")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
install.packages("Rcpp", dependencies = TRUE)
devtools::install_github("cardiomoon/kormaps2014")
install.packages("stringi")
library(stringi)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
devtools::install_github("cardiomoon/kormaps2014")
install.packages("plotly")
library(plotly)
library(ggplot2)
ggplot(data = mpg, aes(displ, highway, col = drv)) + geom_point()
library(dplyr)
library(stringr)
raw_moon <- readLines("speech_moon.txt", encoding = "UTF-8")
head(raw_moon)
moon <- raw_moon %>% str_replace_all("^가-힣", " ")
head(moon)
moon <- raw_moon %>% str_replace_all("[^가-힣]", " ")
head(moon)
moon <- moon %>% str_squish()
head(moon)
moon <- as_tibble(moon)
moon
View(moon)
install.packages("tidytext")
library(tidytext)
word_space <- moon %>% unnest_tokens(input = value, output = word, token = "words")
View(word_space)
word_space <- word_space %>% count(word, sort = T)
word_space <- word_space %>% count(word, sort = T) %>% filter(str_count(word)>1)
library(dplyr)
library(stringr)
raw_moon <- readLines("speech_moon.txt", encoding = "UTF-8")
head(raw_moon)
moon <- raw_moon %>% str_replace_all("[^가-힣]", " ") #한글이 아닌 정보 삭제
head(moon)
moon <- moon %>% str_squish()  #두 칸 이상의 연속된 공백 삭제
head(moon)
moon <- as_tibble(moon) #tibble로 변환
moon
install.packages("tidytext")
install.packages("tidytext")
p
library(tidytext)
word_space <- word_space %>% count(word, sort = T) %>% filter(str_count(word)>1)
library(dplyr)
library(stringr)
word_space <- word_space %>% count(word, sort = T) %>% filter(str_count(word)>1)
raw_moon <- readLines("speech_moon.txt", encoding = "UTF-8")
head(raw_moon)
moon <- raw_moon %>% str_replace_all("[^가-힣]", " ") #한글이 아닌 정보 삭제
head(moon)
moon <- moon %>% str_squish()  #두 칸 이상의 연속된 공백 삭제
head(moon)
moon <- as_tibble(moon) #tibble로 변환
moon
library(tidytext)
View(word_space)
word_space <- moon %>% unnest_tokens(input = value, output = word, token = "words")
word_space <- word_space %>% count(word, sort = T)
word_space <- word_space %>% filter(str_count(word) > 1)
View(word_space)
top <- word_space %>% head(20)
top20 <- word_space %>% head(20)
rm(top)
library(ggplot2)
#맥북 한글 처리용
install.packages("extrafont")
library(extrafont)
font_import()
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
ggplot(top20, aes(reorder(word, -n), n, fill = word)) + geom_bar(stat = "identity") + geom_text(aes(label = n ), hjust = -0.3) + labs(title = "문재인 출마 연설문 단어 빈도") + theme(title = element_text(size=12))
