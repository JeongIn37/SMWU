ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(10, 30) + ylim(0, 40)
ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(0, 30) + ylim(0, 40)
ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(0, 30) + ylim(0, 40) + geom_smooth()
#추세선 추가
ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(0, 30) + ylim(0, 40) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state))  + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 30) + ylim(0, 350000) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) +
geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 30) + ylim(0, 5000) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 350000) + ylim(0, 5000) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state))
+ xlim(0, 350000) + ylim(0, 5000) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 350000) + ylim(0, 5000) + geom_smooth()
#추세선 추가
ggplot(mpg, aes(city, highway, color = cyl)) + geom_point(aes(shape = drv)) + xlim(0, 30) + ylim(0, 40) + geom_smooth()
### midwest 실습문제
ggplot(midwest, aes(poptotal, popasian, color = state)) + geom_point(aes(shape = state)) + xlim(0, 350000) + ylim(0, 5000) + geom_smooth()
library(dplyr)
library(ggplot2)
#한글깨짐해결용
install.packages("extrafont")
library(extrafont)
font_import()
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
### 막대 그래프 그리기 ###
library(dplyr)
library(ggplot2)
df_mpg <- mpg %>% group_by(drv) %>% summarise(mean_sum = mean(sum))
View(df_mpg)
ggplot(df_mpg, aes(drv, mean_sum) + geom_bar(stat = "identity"))
ggplot(df_mpg, aes(drv, mean_sum)) + geom_bar(stat = "identity")
ggplot(df_mpg, aes(reorder(drv, mean_sum), mean_sum)) + geom_bar(stat = "identity")
ggplot(df_mpg, aes(reorder(drv, -mean_sum), mean_sum)) + geom_bar(stat = "identity")
ggplot(df_mpg, aes(reorder(drv, -mean_sum), mean_sum, fill = drv)) + geom_bar(stat = "identity")
ggplot(mpg, aes(class)) + geom_bar()
ggplot(mpg, aes(highway)) + geom_bar()
ggplot(mpg, aes(class, fill=class)) + geom_bar()
ggplot(mpg, aes(class, fill=class)) + geom_bar() + xlim(c("compact", "midsize", "suv"))
ggplot(mpg, aes(class, fill=class)) + geom_bar() + coord_flip()
ggplot(mpg, aes(class, fill=class)) + geom_bar() + coord_polar()
ggplot(mpg, aes(class, fill=fuel)) + geom_bar()
ggplot(mpg, aes(class, fill=fuel)) + geom_bar(position = "dodge")
ggplot(mpg, aes(class, fill=fuel)) + geom_bar(position = "fill")
mpg
df_mpg <- mpg %>% group_by(drv) %>% summarise(mean_sum = mean(sum))
ggplot(df_mpg, aes(drv, mean_sum)) + geom_bar(stat = "identity")
df_suv <- mpg %>% group_by(manufacturer) %>% summarise(mean_city = mean(city))
View(df_suv)
# 막대 그래프 실습 문제 (self)
df_suv <- mpg %>% group_by(manufacturer) %>% summarise(mean_city = mean(city))
ggplot(df_suv, aes(reorder(manufacturer, -mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity")
ggplot(mpg, aes(class, fill=class)) + geom_bar() + coord_flip()
ggplot(df_suv, aes(reorder(manufacturer, -mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity") + coord_flip()
# 막대 그래프 실습 문제 (교수님ver)
mpg_suv <- mpg %>% group_by(manufacturer) %>% filter(class=="suv") %>% summarise(mean_city = mean(city)) %>% arrange(-mean_city) %>% head(5)
View(mpg_suv)
ggplot(mpg_suv, aes(reorder(manufacturer, -mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity") + coord_flip()
ggplot(mpg_suv, aes(reorder(manufacturer, mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity") + coord_flip()
ggplot(mpg_suv, aes(reorder(manufacturer, mean_city), mean_city, fill = manufacturer)) + geom_bar(stat = "identity") + coord_flip() + labs(title = "회사별 suv 도심연비 평균 비교", x = "제조사", y = "suv 도심연비 평균")
### 히스토그램 그리기 ###
ggplot(mpg, aes(highway)) + geom_histogram()
ggplot(mpg, aes(highway)) + geom_histogram(binwidth = 0.5)
ggplot(mpg, aes(highway)) + geom_histogram(binwidth = 5)
ggplot(mpg, aes(highway)) + geom_histogram(binwidth = 1)
ggplot(mpg, aes(highway)) + geom_histogram(binwidth = 1, fill = "yellow", color = "red") + labs(title = "고속도로연비 히스토그램", x = "고속도로연비", y = "빈도")
library(dplyr)
library(ggplot2)
#한글깨짐해결용
install.packages("extrafont")
install.packages("extrafont")
font_import()
#한글깨짐해결용
install.packages("extrafont")
library(extrafont)
font_import()
theme_set(theme_grey(base_family="AppleGothic"))
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
economics <- ggplot2::economics
View(economics)
str(economics)
ggplot(economics, aes(date, unemploy)) + geom_line()
ggplot(economics, aes(date, unemploy)) + geom_line() + geom_point()
ggplot(economics, aes(date, unemploy)) + geom_line(color = "red") + geom_point(color = "darkred")
ggplot(economics, aes(date, unemploy)) + geom_line(color = "red") + geom_point(color = "blue4")
### 상자 그래프 그리기 ####
ggplot(mpg, aes(drv, highway)) + geon_boxplot()
### 상자 그래프 그리기 ####
ggplot(mpg, aes(drv, highway)) + geom_boxplot()
ggplot(mpg, aes(drv, highway), fill = drv) + geom_boxplot()
ggplot(mpg, aes(drv, highway,, fill = drv)) + geom_boxplot()
ggplot(mpg, aes(drv, highway,, fill = drv)) + geom_boxplot(outlier.color = "red")
ggplot(mpg, aes(drv, highway,, fill = drv)) + geom_boxplot(outlier.color = "red") + stat_summary(fun = "mean", geom = "point")
str(corona19)
### 코로나19 그래프 그리기 ###
corona19 <- read.csv("corona19.csv", stringsAsFactors = F)
str(corona19)
corona19$date <- as.Date(corona19$date)
str(corona19)
summary(corona19)
ggplot(corona19, aes(new_tests, new_cases)) + geom_point()
ggplot(corona19, aes(new_tests, new_cases)) + geom_point() + xlim(10000, 60000) + ylim(0, 3000)
ggplot(corona19, aes(new_tests, new_cases)) + geom_point() + xlim(10000, 60000) + ylim(0, 3000) + geom_smooth()
ggplot(corona19, aes(date, new_cases, fill = new_cases)) + geom_bar(stat = "identity")
ggplot(corona19, aes(date, new_cases)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, new_deaths)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, total_deaths)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, positive.rate)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, reproduction.rate)) + geom_line(color="red") + geom_point(color="blue")
ggplot(corona19, aes(date, people_fully_vaccinated)) + geom_line(color="red") + geom_point(color="blue")
corona19_new <- read.csv("corona19.csv", stringsAsFactors = F)
corona19_new$date <- as.Date(corona19_new$date)
ggplot(corona19_new, aes(date, number, color = type))
ggplot(corona19_new, aes(date, number, color = type)) + geom_line() + geom_point()
View(corona19_new)
corona19_new <- read.csv("corona19_new.csv", stringsAsFactors = F)
corona19_new$date <- as.Date(corona19_new$date)
ggplot(corona19_new, aes(date, number, color = type)) + geom_line() + geom_point()
crime <- USArrests
library(tibble)
crime <- rownames_to_column(crime, var = "state")
crime$state <- tolower(crime$state)
install.packages("maps")
library(maps)
library(ggplot2)
states_map <- map_data("state")
install.packages("mapporj")
library(mapproj)
install.packages("ggiraphExtra")
library(ggiraphExtra)
ggChoropleth(data = crime, aes(fill=Murder, map_id=state), map = states_map)
ggChoropleth(data = crime, aes(fill=Murder, map_id=state), map = states_map, interactive = T)
View(states_map)
install.packages("stringi")
install.packages("stringi")
library(stringi)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
library(stringi)
library(devtools)
devtools::install_github("cardiomoon/kormaps2014")
devtools::install_github("cardiomoon/kormaps2014")
devtools::install_github("https://github.com/cardiomoon/kormaps2014")
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
install.packages(c("backports", "conquer", "cpp11", "crayon", "data.table", "deldir", "diffobj", "digest", "generics", "glue", "Hmisc", "hms", "htmlTable", "knitr", "lattice", "lifecycle", "mgcv", "mime", "mvtnorm", "nlme", "pillar", "pkgload", "psych", "ragg", "RcppArmadillo", "rgeos", "rlang", "s2", "sf", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "viridis", "xfun"))
remove.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
devtools::install_github("https://github.com/cardiomoon/kormaps2014")
devtools::install_github("cardiomoon/kormaps2014")
library(devtools)
install.packages("Rcpp", dependencies = TRUE)
library(devtools)
devtools::install_github("cardiomoon/kormaps2014")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
install.packages("Rcpp", dependencies = TRUE)
devtools::install_github("cardiomoon/kormaps2014")
install.packages("stringi")
library(stringi)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("usethis")
devtools::install_github("cardiomoon/kormaps2014")
install.packages("plotly")
library(plotly)
library(ggplot2)
ggplot(data = mpg, aes(displ, highway, col = drv)) + geom_point()
library(dplyr)
library(stringr)
raw_moon <- readLines("speech_moon.txt", encoding = "UTF-8")
head(raw_moon)
moon <- raw_moon %>% str_replace_all("^가-힣", " ")
head(moon)
moon <- raw_moon %>% str_replace_all("[^가-힣]", " ")
head(moon)
moon <- moon %>% str_squish()
head(moon)
moon <- as_tibble(moon)
moon
View(moon)
install.packages("tidytext")
library(tidytext)
word_space <- moon %>% unnest_tokens(input = value, output = word, token = "words")
View(word_space)
word_space <- word_space %>% count(word, sort = T)
word_space <- word_space %>% count(word, sort = T) %>% filter(str_count(word)>1)
library(dplyr)
library(stringr)
raw_moon <- readLines("speech_moon.txt", encoding = "UTF-8")
head(raw_moon)
moon <- raw_moon %>% str_replace_all("[^가-힣]", " ") #한글이 아닌 정보 삭제
head(moon)
moon <- moon %>% str_squish()  #두 칸 이상의 연속된 공백 삭제
head(moon)
moon <- as_tibble(moon) #tibble로 변환
moon
install.packages("tidytext")
install.packages("tidytext")
p
library(tidytext)
word_space <- word_space %>% count(word, sort = T) %>% filter(str_count(word)>1)
library(dplyr)
library(stringr)
word_space <- word_space %>% count(word, sort = T) %>% filter(str_count(word)>1)
raw_moon <- readLines("speech_moon.txt", encoding = "UTF-8")
head(raw_moon)
moon <- raw_moon %>% str_replace_all("[^가-힣]", " ") #한글이 아닌 정보 삭제
head(moon)
moon <- moon %>% str_squish()  #두 칸 이상의 연속된 공백 삭제
head(moon)
moon <- as_tibble(moon) #tibble로 변환
moon
library(tidytext)
View(word_space)
word_space <- moon %>% unnest_tokens(input = value, output = word, token = "words")
word_space <- word_space %>% count(word, sort = T)
word_space <- word_space %>% filter(str_count(word) > 1)
View(word_space)
top <- word_space %>% head(20)
top20 <- word_space %>% head(20)
rm(top)
library(ggplot2)
#맥북 한글 처리용
install.packages("extrafont")
library(extrafont)
font_import()
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
ggplot(top20, aes(reorder(word, -n), n, fill = word)) + geom_bar(stat = "identity") + geom_text(aes(label = n ), hjust = -0.3) + labs(title = "문재인 출마 연설문 단어 빈도") + theme(title = element_text(size=12))
library(dplyr)
library(dplyr)
library(stringr)
library(tidytext)
#맥북 한글 처리용
install.packages("extrafont")
library(extrafont)
font_import()
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
library(dplyr)
library(stringr)
install.packages("ggwordcloud")
library(ggwordcloud)
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 1234) + scale_radius(limits = c(3, NA), range = (3, 30))
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 1234) + scale_radius(limits = c(3, NA), range = c(3, 30))
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 1234) + scale_radius(limits = c(3, NA), range = c(3, 30))
theme_set(theme_grey(base_family="AppleGothic"))
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 1234) + scale_radius(limits = c(3, NA), range = c(3, 30))
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 1234, family="AppleGothic") + scale_radius(limits = c(3, NA), range = c(3, 30))
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 123, family="AppleGothic") + scale_radius(limits = c(3, NA), range = c(3, 30))
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 1234, family="AppleGothic") + scale_radius(limits = c(3, 4), range = c(3, 30))
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 1234, family="AppleGothic") + scale_radius(limits = c(3,NA), range = c(3,20))
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 1234, family="AppleGothic") + scale_radius(limits = c(3,NA), range = c(3,10))
ggplot(word_space, aes(label = word, size = n, col = n)) + geom_text_wordcloud(seed = 1234, family="AppleGothic") + scale_radius(limits = c(3,NA), range = c(3,10)) + scale_color_gradient(low ="#66aaf2", high="#004EA1") + theme_minimal()
ggplot(word_space, aes(label = word, size = n, col = n)) + geom_text_wordcloud(seed = 1234, family="AppleGothic") + scale_radius(limits = c(3,NA), range = c(3,10)) + scale_color_gradient(low ="#66aaf2", high="#004EA1") + theme_minimal()
ggplot(word_space, aes(label = word, size = n, col = n)) + geom_text_wordcloud(seed = 1234, family="AppleGothic") + scale_radius(limits = c(3,NA), range = c(3,10)) + scale_color_gradient(low ="darkgreen", high="darkred") + theme_minimal()
#font
install.packages("showtext")
library(showtext)
font_add_google(name = "Nanum Gothic", family = "nanumgothic")
showtext_auto()
ggplot(top20, aes(reorder(word, -n), n, fill = word)) + geom_bar(stat = "identity") + geom_text(aes(label = n ), hjust = -0.3) + labs(title = "문재인 출마 연설문 단어 빈도") + theme(title = element_text(size=12), text = element_text(family = "nanumgothic"))
ggplot(top20, aes(reorder(word, -n), n, fill = word)) + geom_bar(stat = "identity") + geom_text(aes(label = n ), hjust = -0.3) + labs(title = "문재인 출마 연설문 단어 빈도") + theme(title = element_text(size=12))
ggplot(top20, aes(reorder(word, -n), n, fill = word)) + geom_bar(stat = "identity") + geom_text(aes(label = n ), hjust = -0.3) + labs(title = "문재인 출마 연설문 단어 빈도") + theme(title = element_text(size=12), text = element_text(family = "nanumgothic"))
ggplot(word_space, aes(label = word, size = n, col = n)) + geom_text_wordcloud(seed = 1234, family="nanumgothic") + scale_radius(limits = c(3,NA), range = c(3,10)) + scale_color_gradient(low ="darkgreen", high="darkred") + theme_minimal()
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
#맥북 한글 처리용
install.packages("extrafont")
library(extrafont)
font_import()
theme_set(theme_grey(base_family="AppleGothic"))
library(ggplot2)
theme_set(theme_grey(base_family="AppleGothic"))
library(ggwordcloud)
ggplot(word_space, aes(label = word, size = n)) + geom_text_wordcloud(seed = 1234, family="AppleGothic") + scale_radius(limits = c(3,NA), range = c(3,10))
library(showtext)
ggplot(word_space, aes(label = word, size = n, col = n)) + geom_text_wordcloud(seed = 1234, family="nanumgothic") + scale_radius(limits = c(3,NA), range = c(3,10)) + scale_color_gradient(low ="darkgreen", high="darkred") + theme_minimal()
library(ggplot2)
library(showtext)
ggplot(word_space, aes(label = word, size = n, col = n)) + geom_text_wordcloud(seed = 1234, family="nanumgothic") + scale_radius(limits = c(3,NA), range = c(3,10)) + scale_color_gradient(low ="darkgreen", high="darkred") + theme_minimal()
#font
install.packages("showtext")
library(showtext)
font_add_google(name = "Nanum Gothic", family = "nanumgothic")
showtext_auto()
install.packages("showtext")
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
library(showtext)
ggplot(word_space, aes(label = word, size = n, col = n)) + geom_text_wordcloud(seed = 1234, family="nanumgothic") + scale_radius(limits = c(3,NA), range = c(3,10)) + scale_color_gradient(low ="darkgreen", high="darkred") + theme_minimal()
install.packages("ggwordcloud")
library(ggwordcloud)
ggplot(word_space, aes(label = word, size = n, col = n)) + geom_text_wordcloud(seed = 1234, family="nanumgothic") + scale_radius(limits = c(3,NA), range = c(3,10)) + scale_color_gradient(low ="darkgreen", high="darkred") + theme_minimal()
##형태소 분석을 위한 KoNLP 패키지 설치
#자바와 rJAVA 패키지 설치
install.packages("multilinguer")
remotes::install_gitlab("mrchypark/multilinguer")
remotes::install_gitlab("mrchypark/multilinguer")
library(multilinguer)
##형태소 분석을 위한 KoNLP 패키지 설치
#자바와 rJAVA 패키지 설치
install.packages("multilinguer")
remotes::install_gitlab("mrchypark/multilinguer")
remotes::install_github("JeongIn37/multilinguer")
remotes::install_github("JeongIn37/multilinguer")
remotes::install_github("mrchypark/multilinguer")
.libPaths()
Sys.setenv(R_INSTALL_STAGED = FALSE)
install.packages(c('hash', 'tau', 'Sejong', 'RSQLite'))
install.packages('devtools')
remotes::install_github("mrchypark/multilinguer")
.libPaths()
remotes::install_github("mrchypark/multilinguer", lib="/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library")
.libPaths()
install.packages("~/Downloads/multilinguer-main.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/mrchypark-multilinguer-44d8678.tar.gz", repos = NULL, type = "source")
remotes::install_gitlab("mrchypark/multilinguer", dependencies = TRUE)
library(multilinguer)
##형태소 분석을 위한 KoNLP 패키지 설치
#자바와 rJAVA 패키지 설치
install.packages("multilinguer")
install.packages("multilinguer")
remotes::install_gitlab("mrchypark/multilinguer", dependencies = TRUE)
remotes::install_gitlab("mrchypark/multilinguer")
library(multilinguer)
install_jdk()
install_java()
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("haven-jeon/KoNLP", upgrade = "never", INSTALL_opts=c("--no-multiarch"))
install.packages("rJava")
rJava::jinit()
rJava
install.packages("KoNLP",
repos = c("https://forkonlp.r-universe.dev",
"https://cloud.r-project.org"),
INSTALL_opts = c("--no-multiarch")
)
library("KoNLP")
SimplePos09("안녕하신가요?")
###실습 시작
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
library(ggwordcloud)
library(showtext)
word_non <- moon %>% unnest_tokens(input = value, output = word, token = extractNoun)
View(word_non)
word_noun <- moon %>% unnest_tokens(input = value, output = word, token = extractNoun)
View(word_noun)
##명사 빈도 분석하기
#빈도수 상위 20개에 대해서 막대 그래프 그리기
top20 <- word_noun %>% head(20)
##명사 빈도 분석하기
#빈도수 상위 20개에 대해서 막대 그래프 그리기
rm(word_non)
##명사 빈도 분석하기
#빈도수 상위 20개에 대해서 막대 그래프 그리기
word_nount <- word_noun %>% count(word, sort = T) %>% filter(str_count(word) > 1 )
View(word_nount)
View(word_noun)
View(word_nount)
View(welfare7)
##명사 빈도 분석하기
#빈도수 상위 20개에 대해서 막대 그래프 그리기
word_noun <- word_noun %>% count(word, sort = T) %>% filter(str_count(word) > 1 )
rm(word_nount)
View(word_noun)
top20 <- word_noun %>% head(20)
View(states_map)
View(top20)
#글자체 변경
library(showtext)
fond_add_google(name = "Black Han Sans", family = "BHS")
font_add_google(name = "Black Han Sans", family = "BHS")
showtext_auto()
#막대 그래프 그리기
ggplot(top20, aes(reorder(word, -n), n, fill = word)) + geom_bar(stat = "identity") + geom_text(aes(label = n ), hjust = -0.3) + labs(title = "문재인 출마 연설문 명사 빈도") + theme(title = element_text(size=12), text = element_text(family = "BHS"))
#워드 클라우드 그리기
ggplot(word_noun, aes(label = word, size = n, col = n)) + geom_text_wordcloud(seed = 1234, family="BHS") + scale_radius(limits = c(2,NA), range = c(3,15)) + scale_color_gradient(low ="darkgreen", high="darkred") + theme_minimal()
#특정 단어가 포함된 문장 찾기
sentences_moon <- raw_moon %>% str_squish() %>% as_tibble() %>% unnest_tokens(input=value, output=sentence, token = "sentences")
View(sentences_moon)
sentences_moon %>% filter(str_detect(sentence, "국민"))
sentences_moon %>% filter(str_detect(sentence, "일자리")) %>% print.data.frame(right = F)
## 박전대통령 연설문 불러와 저장 ##
raw_park <- readLines("speech_park.txt", encoding = "UTF-8")
park <- raw_park %>% as_tibble() %>% mutate(president = "park")
View(park)
## 두 연설문 통합과 전처리 및 토큰화 ##
bind_speeches <- bind_rows(moon, park) %>% relocate(president, .before = value)
View(bind_speeches)
## 문대통령 연설문 불러와 저장 ##
raw_moon <- readLines("speech_moon.txt", encoding = "UTF-8")
moon <- raw_moon %>% as_tibble() %>% mutate(president = "moon")
## 두 연설문 통합과 전처리 및 토큰화 ##
bind_speeches <- bind_rows(moon, park) %>% relocate(president, .before = value)
View(bind_speeches)
library(stringr)
speeches <- bind_speeches %>% mutate(value = str_replace_all(value, "[^가-힣]", " "), value = str_squish(value))
View(speeches)
library(KoNLP)
speeches <- speeches %>% unnest_tokens(input = value, output = word, token = extractNoun)
View(speeches)
## 대통령별 단어 빈도수 구하기 ##
frequency <- speeches %>% count(president, word) %>% filter(str_count(word) > 1)
View(frequency)
## 빈도수 상위 10개 단어 데이터 만들기 ##
top10 <- frequency %>% group_by(president) %>% slice_max(n, n = 10) %>% print(n = Inf)
top10 <- frequency %>% group_by(president) %>% slice_max(n, n = 10, with_ties = F) %>% print(n = Inf)
## 막대 그래프 그리기 ##
library(ggplot2)
ggplot(top10, aes(reorder(word, n), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~president)
ggplot(top10, aes(reorder(word, n), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~president, scales = "free_y")
# park에서 국민 단어 제외하기 #
top10 <- frequency %>% filter(word != "국민") %>% group_by(president) %>% slice_max(n, n = 10, with_ties = F) %>% print(n = Inf)
ggplot(top10, aes(reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~president, scales = "free_y")
ggplot(top10, aes(reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~president, scales = "free_y") + scale_x_reordered() + labs(x = NULL)
ggplot(top10, aes(reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~president, scales = "free_y")
ggplot(top10, aes(reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~president, scales = "free_y") + scale_x_reordered() + labs(x = NULL)
ggplot(top10, aes(reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~president, scales = "free_y")
## long form data를 wide form data로 변경하기 ##
df_long <- frequency %>% group_by(president) %>% slice_max(n, n = 10) %>% filter(word %in% c("국민", "우리", "정치", "행복"))
View(df_long)
df_wide <- df_long %>% pivot_wider(names_from = president, values_from = n)
### 오즈비 구하기 ###
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidytext)
library(stringr)
df_wide <- df_long %>% pivot_wider(names_from = president, values_from = n)
View(df_wide)
df_wide <- df_long %>% pivot_wider(names_from = president, values_from = n, values_fill = list(n=0))
View(df_wide)
frequency_wide <- frequency %>% pivot_wider(names_from = president, values_from = n, values_fill = list(n=0))
View(frequency_wide)
## 오즈비 구하기 ##
frequency_wide <- frequency_wide %>% mutate(ratio_moon = ((moon + 1)/(sum(moon + 1))), ratio_park = ((park + 1)/(sum(park + 1))))
frequency_wide <- frequency_wide %>% mutate(odds_ratio = ratio_moon / ratio_park)
frequency_wide %>% arrange(-odds_ratio)
frequency_wide %>% arrange(odds_ratio)
frequency_wide %>% arrange(odds_ratio) #오름차순. park에서 차지하는 비중이 더 높음
frequency_wide %>% arrange(abs(1-odds_ratio)) #비슷하게 차지하는 것
## top10 데이터 만들기 ##
top10 <- frequency_wide %>% filter(rank(odds_ratio) <= 10 | rank(-odds_ratio) <= 10) %>% arrange(-odds_ratio)
View(top10)
# 새로운 두 개 변수 만들기 #
ggplot(top10, aes(x = reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~ president, scales = "free_y") + scale_x_reordered() + labs(x = NULL)
## 막대 그래프 그리기 ##
top10 <- top10 %>% mutate(president = ifelse(odds_ratio > 1, "moon", "park"), n = ifelse(odds_ratio > 1, moon, park))
# 새로운 두 개 변수 만들기 #
ggplot(top10, aes(x = reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~ president, scales = "free_y") + scale_x_reordered() + labs(x = NULL)
ggplot(top10, aes(x = reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~ president, scales = "free") + scale_x_reordered() + labs(x = NULL) # 그래프별로 축 설정하기 #
ggplot(top10, aes(reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~president, scales = "free_y")
ggplot(top10, aes(x = reorder_within(word, n, president), n, fill = president)) + geom_bar(stat = "identity") + coord_flip() + facet_wrap(~ president, scales = "free") + scale_x_reordered() + labs(x = NULL) # 그래프별로 축 설정하기 #
## 주요 단어가 사용된 문장 살펴보기 ##
speeches_sentence <- bind_speeches %>% as_tibble() %>% unnest_tokens(input = value, output = sentence, token = "sentences")
View(speeches_sentence)
speeches_sentence %>% filter(president == "moon" & str_detect(sentence, "복지국가"))
speeches_sentence %>% filter(president == "park" & str_detect(sentence, "행복"))
speeches_sentence %>% filter(president == "moon" & str_detect(sentence, "복지국가")) %>% print.data.frame(right = F)
speeches_sentence %>% filter(president == "park" & str_detect(sentence, "행복")) %>% print.data.frame(right = F)
#중요도가 비슷한 단어 살펴보기
frequency_wide %>% arrange(abs(1 - odds_ratio)) %>% head(10)
frequency_wide %>% filter(moon >= 5 & park >= 5) %>% arrange(abs(1 - odds_ratio)) %>% head(10)
